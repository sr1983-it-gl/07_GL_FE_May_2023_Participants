import {FoodItem} from "../food-item/model/food-item.js";
import {FoodItemUtils} from "../food-item/food-item-utils.js";

class CartModel{

    constructor(){

        this.items = new Map();
    }

    getItems(){
        return this.items;
    }

    getQuantity(foodItemId){

        foodItemId = this.asNumber(foodItemId);

        const itemPresent = this.items.has(foodItemId);
        if (itemPresent){
            let existingQuantity = this.items.get(foodItemId);
            return existingQuantity;
        }else{
            return 0;
        }
    }

    isItemPresent(foodItemId){

        foodItemId = this.asNumber(foodItemId);

        const itemPresent = this.items.has(foodItemId);
        if (itemPresent){
            return true;
        }else{
            return false;
        }
    }

    add(foodItemId){

        foodItemId = this.asNumber(foodItemId);
        const itemPresent = this.isItemPresent(foodItemId);

        if (itemPresent){

            let existingQuantity = this.items.get(foodItemId);
            existingQuantity ++;      
            this.items.set(foodItemId, existingQuantity);
        }else{
            this.items.set(foodItemId, 1);
        }
    }

    remove(foodItemId){

        foodItemId = this.asNumber(foodItemId);
        const itemPresent = this.isItemPresent(foodItemId);

        if (itemPresent){
            let existingQuantity = this.items.get(foodItemId);
            
            if (existingQuantity === 1){
                // Remove Entry
                this.items.delete(foodItemId);
            }else{
                existingQuantity --;      
                this.items.set(foodItemId, existingQuantity);  
            }
        }
    }

    hasItems(){
        return this.items.size > 0;
    }

    asNumber(str){
        return parseInt(str);
    }

    getTotalItems(){

        return this.items.size;
    }

    getSum(){

        let sum = 0;

        for (let foodItemId of this.items.keys()){

            console.log(`Food Item ID ${foodItemId}` );
            const foodItemObj 
                = FoodItemUtils.retriveFromFoodItemId(foodItemId);

            const noOfItems = this.items.get(foodItemId);
            sum = sum + (noOfItems * foodItemObj.price);
        }
        
        return sum;
    }
}

export {CartModel};


--



import {CartModel} from "../cart/cart-model.js"

class CartView {

    constructor(cartModel){
        this.cartModel = cartModel;
    }

    render() {

        this.renderCartItemsView();
        this.renderCartCheckoutView();
    }

    renderCartItemsView() {

    }

    renderCartCheckoutView() {
        
    }
}

export {CartView}    

--

import {FoodItemUtils} from "../food-item/food-item-utils.js"

class CartView {
	
	...
	
	renderCartItemsView() {

		const cartItemsTable = document.getElementById('table-body');
		cartItemsTable.innerHTML= '';
	
		const cartItems = this.cartModel.getItems();
		
		for (let foodItemId of cartItems.keys()){
	
		  const foodItemObj 
			= FoodItemUtils.retriveFromFoodItemId(foodItemId);
	
		  const tableRow= document.createElement('tr');
	
		  // Create row data
	
			// For Image
			const imageElement = document.createElement('td');
			const imageObj = document.createElement('img');
			
			imageObj.src= foodItemObj.imagePath;
			imageElement.appendChild(imageObj);
	
			// For Item Name
			const nameElement = document.createElement('td');
			nameElement.innerText= foodItemObj.name;
		
			// For Quantity Increase / Decrease Buttons
		
			const quantityElement= document.createElement('td');
			
				const decreaseButton = document.createElement('button');
				decreaseButton.innerText= '-';
			
				const spanElement = document.createElement('span');
				const quantity = this.cartModel.getQuantity(foodItemId);
				spanElement.innerText = quantity;
			
				const increaseButton = document.createElement('button');
				increaseButton.innerText= '+';
		
			quantityElement.appendChild(decreaseButton);
			quantityElement.appendChild(spanElement);
			quantityElement.appendChild(increaseButton);
	
		  // For Price
		  const priceElement = document.createElement('td');
		  priceElement.innerText= foodItemObj.price;
	  
		  tableRow.appendChild(imageElement);
		  tableRow.appendChild(nameElement);
		  tableRow.appendChild(quantityElement);
		  tableRow.appendChild(priceElement);
	  
		  cartItemsTable.appendChild(tableRow);      
		}    
	}
	
}

--



class CartView {

	...
	
	renderCartCheckoutView() {

		const totalItems = this.cartModel.getTotalItems();
		const totalItemsObj = document.getElementById("total-item");
		totalItemsObj.innerText = `Total Items : ${totalItems}`;

		const sum = this.cartModel.getSum();
		const totalPriceObj = document.getElementById("total-price");
		totalPriceObj.innerText = `Total Price : ${sum}`;        
	}
}

--


import {CartModel} from "./cart-model.js"
import { CartView } from "./cart-view.js"

class CartController {

    constructor(){

        this.cartModel = this.createSampleCartModel();
        this.cartView = new CartView(this.cartModel);
    }

    init(){
        this.cartView.render();
    }

    createSampleCartModel(){

        const sampleCartModel = new CartModel();

        sampleCartModel.add(1);
        sampleCartModel.add(10);
        sampleCartModel.add(1);
        sampleCartModel.add(5);
        sampleCartModel.add(10);
        sampleCartModel.add(1);

        return sampleCartModel;
    }
}

export {CartController}


--

import {CartModel} from "../cart/cart-model.js"

class MCIntegrationView {

    constructor(cartModel){
        this.cartModel = cartModel;
    }
}

export {MCIntegrationView}    

--


import {CartController} from "../cart/cart-controller.js"
import {MCIntegrationView} from "./mc-integration-view.js"

class MCIntegrationController {

    constructor(cartController){

        this.cartController = cartController;
        this.mcIntegrationView = new MCIntegrationView(
            this.cartController.cartModel
        );
    }

    init(){

    }

}
export {MCIntegrationController}


--

class MCIntegrationController {

	....
	
	init(){

		this.addListeners()
	}

	addListeners(){

		this.addCartPlusButtonListener();
	}

	addCartPlusButtonListener(){

		const cartElement = document.getElementById('cart-plus');
		cartElement.addEventListener('click', (event) => {

			if (this.cartController.cartModel.hasItems()){

				this.mcIntegrationView.displayToggleView();
			}else{
				alert("Currently no item in cart!");
			}
		});

	}    
}

--


class MCIntegrationView {

	...
	
	displayToggleView(){

		document.getElementById('food-items').classList.toggle('food-items');
		document.getElementById('category-list').classList.toggle('food-items');
		document.getElementById('category-header').classList.toggle('toggle-category');
		document.getElementById('m-cart-plus').classList.toggle('m-cart-toggle')
		document.getElementById('cart-page').classList.toggle('cart-toggle');
		document.getElementById('checkout').classList.toggle('cart-toggle');    
	}
	
}


--


import {MCIntegrationController} from "../mc-integration/mc-integration-controller.js"

class FoodAppController {
	
	...
	
	init(){

		...

		const cartController = new CartController();
		cartController.init();

		const mcIntegrationController = new MCIntegrationController(cartController);
		mcIntegrationController.init();

	}

}

--

class MCIntegrationController {
	
	...
	
	addListeners(){

		...
		
		this.addAddToCartListener();
	}


	addAddToCartListener(){

		const allItems = document.querySelectorAll(".add-to-cart");
		
		allItems.forEach( (item) => {
	
			item.addEventListener("click", (event) => {

			})
		})
	}

}

--

class MCIntegrationView {

	...
	
	enableToggleHeart(foodItemId){

		const foodItemObj = document.getElementById(foodItemId);
		foodItemObj.classList.add("toggle-heart");
	}

	updateTotalNoOfItemsText(){

		const noOfItemsElement = document.getElementById('cart-plus')
		const totalItems = this.cartModel.getTotalItems();
		console.log(`Total Items` + totalItems);
		noOfItemsElement.innerText = `${totalItems} Items`;
	}
	
}


--

addAddToCartListener(){

    const allItems = document.querySelectorAll(".add-to-cart");
    
    allItems.forEach( (item) => {

        item.addEventListener("click", (event) => {

            const target = event.target;
        
            const foodItemId = target.getAttribute("id");
            
            if (!this.cartController.cartModel.isItemPresent(foodItemId)){
                this.mcIntegrationView.enableToggleHeart(foodItemId);
            }else{
                alert("Item added to cart");
            }
        
            this.cartController.cartModel.add(foodItemId);        
            this.mcIntegrationView.updateTotalNoOfItemsText();    

            this.cartController.cartView.render();
        })
    })
}


--


constructor(){

    // this.cartModel = this.createSampleCartModel();
    this.cartModel = new CartModel();
    this.cartView = new CartView(this.cartModel);
}

--


renderCartItemsView() {

	const decreaseButton = document.createElement('button');
	decreaseButton.setAttribute('class','decrease-item');
	decreaseButton.setAttribute('id',`${foodItemId}`);
	decreaseButton.innerText= '-';

	...
	...

	const increaseButton = document.createElement('button');
	increaseButton.setAttribute('class','increase-item');
	increaseButton.setAttribute('id',`${foodItemId}`);
	increaseButton.innerText= '+';

}

--

addEventForIncrementQuantityButtons(){

  const increaseItemElements = document.querySelectorAll('.increase-item');

  increaseItemElements.forEach( (increaseItem) =>{

    increaseItem.param1 = this;
    increaseItem.addEventListener('click',  (event) => {

      const target = event.target;
      const foodItemId = target.getAttribute("id");
  
      const cartViewObj = target.param1;
      cartViewObj.cartModel.add(foodItemId);
  
      cartViewObj.renderCartCheckoutView();
      cartViewObj.renderCartItemsView(); 
  
    });
  })
}


--


addEventForDecrementQuantityButtons(){

  const decrementItemElements = document.querySelectorAll('.decrease-item');

  decrementItemElements.forEach( (decrementItem) =>{

    decrementItem.param1 = this;
    decrementItem.addEventListener('click',  (event) => {

      const target = event.target;
      const foodItemId = target.getAttribute("id");
  
      const cartViewObj = target.param1;
      cartViewObj.cartModel.remove(foodItemId);
  
      cartViewObj.renderCartCheckoutView();
      cartViewObj.renderCartItemsView(); 
    });
  })
}


--

disableToggleHeart(foodItemId){

    const foodItemObj = document.getElementById(foodItemId);
    foodItemObj.classList.remove("toggle-heart");          
}


--

setMCIntegrationView(mcIntegrationView){
  this.mcIntegrationView = mcIntegrationView
}

--

const target = event.target;
const foodItemId = target.getAttribute("id");

const cartViewObj = target.param1;

const quantity = cartViewObj.cartModel.getQuantity(foodItemId);
if (quantity == 1){

    cartViewObj.mcIntegrationView.disableToggleHeart(foodItemId);
}

cartViewObj.cartModel.remove(foodItemId);

cartViewObj.mcIntegrationView.updateTotalNoOfItemsText();

cartViewObj.renderCartCheckoutView();
cartViewObj.renderCartItemsView(); 


--

init(){

    ...
    ...

    const mcIntegrationController = new MCIntegrationController(cartController);
    mcIntegrationController.init();

    cartController.cartView.setMCIntegrationView(mcIntegrationController.mcIntegrationView);

}

--

const target = event.target;
const foodItemId = target.getAttribute("id");

const cartViewObj = target.param1;

const quantity = cartViewObj.cartModel.getQuantity(foodItemId);
const totalItemsInCart = cartViewObj.cartModel.getTotalItems();

if (totalItemsInCart == 1 && quantity == 1) {

    cartViewObj.mcIntegrationView.disableToggleHeart(foodItemId);
    cartViewObj.cartModel.remove(foodItemId);
    cartViewObj.mcIntegrationView.updateTotalNoOfItemsText();

    cartViewObj.mcIntegrationView.displayToggleView();

}else {

    if (quantity == 1){    
        cartViewObj.mcIntegrationView.disableToggleHeart(foodItemId);
    }
    
    cartViewObj.cartModel.remove(foodItemId);

    cartViewObj.mcIntegrationView.updateTotalNoOfItemsText();

    cartViewObj.renderCartCheckoutView();
    cartViewObj.renderCartItemsView();             
}    

--
